<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivationCodeError" xml:space="preserve">
    <value>Cannot construct Photo Kiosk activation code ({0}).</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="KeyIsInvalid" xml:space="preserve">
    <value>Your license key has wrong format.</value>
  </data>
  <data name="PrintingError" xml:space="preserve">
    <value>Unable to print a receipt.
{0}</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="SuccessfullyRegistered" xml:space="preserve">
    <value>Your license key was successfully registered.</value>
  </data>
  <data name="SuccessfullyUnregistered" xml:space="preserve">
    <value>Your license key was successfully unregistered.</value>
  </data>
  <data name="UnauthorizedAccessError" xml:space="preserve">
    <value>You do not have the necessary registry rights.</value>
  </data>
  <data name="Unregister" xml:space="preserve">
    <value>Unregister</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="RecieptTestCropMode" xml:space="preserve">
    <value>Crop to Fill</value>
  </data>
  <data name="RecieptTestCustomerName" xml:space="preserve">
    <value>John Doe</value>
  </data>
  <data name="RecieptTestOrderId" xml:space="preserve">
    <value>KioskID_123</value>
  </data>
  <data name="RecieptTestPaperType" xml:space="preserve">
    <value>Glossy</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="RegisteryKeyNotFound" xml:space="preserve">
    <value>{0} registry key cannot be found.</value>
  </data>
  <data name="UserCancelsOperation" xml:space="preserve">
    <value>Operation was terminated by the user.</value>
  </data>
  <data name="AdditionalServicesScreen" xml:space="preserve">
    <value>Additional Services Screen</value>
  </data>
  <data name="BluetoothFolderError" xml:space="preserve">
    <value>Bluetooth folder does not exist.</value>
  </data>
  <data name="BluetoothHostError" xml:space="preserve">
    <value>Bluetooth host cannot be an empty string.</value>
  </data>
  <data name="BurningScreen" xml:space="preserve">
    <value>CD\DVD Burning Screen</value>
  </data>
  <data name="CallbackFileError" xml:space="preserve">
    <value>Callback file does not exist.</value>
  </data>
  <data name="ChannelError" xml:space="preserve">
    <value>Channel with the same name already exists.</value>
  </data>
  <data name="ChooseUploadWayScreen" xml:space="preserve">
    <value>Choose Upload Way Screen</value>
  </data>
  <data name="ConfirmOrderScreen" xml:space="preserve">
    <value>Confirm Order Screen</value>
  </data>
  <data name="ContactInfoScreen" xml:space="preserve">
    <value>Contact Info Screen</value>
  </data>
  <data name="DestinationPathError" xml:space="preserve">
    <value>Order store path does not exist.</value>
  </data>
  <data name="DiscLabelError" xml:space="preserve">
    <value>Disc label cannot be an empty string.</value>
  </data>
  <data name="DiscountValueOutOfRangeError" xml:space="preserve">
    <value>Value should be in range [{0}, {1}].</value>
  </data>
  <data name="DiscountValueToBigError" xml:space="preserve">
    <value>Value should be greater or equal than {0}.</value>
  </data>
  <data name="DiscountValueToLessError" xml:space="preserve">
    <value>Value should be positive integer.</value>
  </data>
  <data name="ImageEditorScreen" xml:space="preserve">
    <value>Image Editor Screen</value>
  </data>
  <data name="InactivityTimeoutError" xml:space="preserve">
    <value>Inactivity timeout should be greater than 0.</value>
  </data>
  <data name="InstantPostfix" xml:space="preserve">
    <value> (Instant)</value>
  </data>
  <data name="LocalizationFileError" xml:space="preserve">
    <value>Localization file does not exist.</value>
  </data>
  <data name="MemoryCacheSizeError" xml:space="preserve">
    <value>Memory cache size should be greater than 0.</value>
  </data>
  <data name="MinimumPriceLabel" xml:space="preserve">
    <value>Minimum price ({0}):</value>
  </data>
  <data name="OrderFormingScreen" xml:space="preserve">
    <value>Order Forming Screen</value>
  </data>
  <data name="OrderIdScreen" xml:space="preserve">
    <value>Order ID Screen</value>
  </data>
  <data name="PaperDpiError" xml:space="preserve">
    <value>Format resolution should be greater than 0.</value>
  </data>
  <data name="PaperFormatDuplicateError" xml:space="preserve">
    <value>Paper format with the same name already exists.</value>
  </data>
  <data name="PaperFormatEmptyError" xml:space="preserve">
    <value>Paper format name cannot be an empty string.</value>
  </data>
  <data name="PaperHeightError" xml:space="preserve">
    <value>Paper height should be greater than 0.</value>
  </data>
  <data name="PaperTypeDuplicateError" xml:space="preserve">
    <value>Paper type with the same name already exists.</value>
  </data>
  <data name="PaperTypeEmptyError" xml:space="preserve">
    <value>Paper type name cannot be an empty string.</value>
  </data>
  <data name="PaperWidthError" xml:space="preserve">
    <value>Paper width should be greater than 0.</value>
  </data>
  <data name="PhotoTemplateError" xml:space="preserve">
    <value>Photo template should ends with "{0}"</value>
  </data>
  <data name="PriceError" xml:space="preserve">
    <value>Price should be greater than 0.</value>
  </data>
  <data name="PrintingScreen" xml:space="preserve">
    <value>Photo Printing Screen</value>
  </data>
  <data name="ProgressScreen" xml:space="preserve">
    <value>Progress Screen</value>
  </data>
  <data name="ReceiptTemplateError" xml:space="preserve">
    <value>Receipt template file does not exist.</value>
  </data>
  <data name="ScreenImageError" xml:space="preserve">
    <value>Image file does not exist.</value>
  </data>
  <data name="SearchProcessDurationError" xml:space="preserve">
    <value>Search process duration should be greater than 0.</value>
  </data>
  <data name="SelectFoldersScreen" xml:space="preserve">
    <value>Select Folders Screen</value>
  </data>
  <data name="SelectScreen" xml:space="preserve">
    <value>Select Screen</value>
  </data>
  <data name="ServiceNameDuplicateError" xml:space="preserve">
    <value>Service with the same name already exists.</value>
  </data>
  <data name="ServiceNameEmptyError" xml:space="preserve">
    <value>Service name cannot be an empty string.</value>
  </data>
  <data name="ThankYouCancelScreen" xml:space="preserve">
    <value>Thank You Cancel Screen</value>
  </data>
  <data name="ThankYouScreen" xml:space="preserve">
    <value>Thank You Screen</value>
  </data>
  <data name="ThemeFileError" xml:space="preserve">
    <value>Theme file does not exist.</value>
  </data>
  <data name="UploadingPhotosScreen" xml:space="preserve">
    <value>Uploading Photos Screen</value>
  </data>
  <data name="WelcomeScreen" xml:space="preserve">
    <value>Welcome Screen</value>
  </data>
  <data name="OrderManagerConfigError" xml:space="preserve">
    <value>Unable to read Order Manager configuration. 
{0}</value>
  </data>
  <data name="PhotoKioskConfigError" xml:space="preserve">
    <value>Unable to read Photo Kiosk configuration. 
{0}</value>
  </data>
  <data name="PriceReadingError" xml:space="preserve">
    <value>Unable to read prices file. 
{0}</value>
  </data>
  <data name="CropFileError" xml:space="preserve">
    <value>Crop formats file does not exist.</value>
  </data>
  <data name="PriceFileError" xml:space="preserve">
    <value>Price file does not exist.</value>
  </data>
  <data name="CopyToCrops" xml:space="preserve">
    <value>Add the same crop format</value>
  </data>
  <data name="CropFormatDuplicateError" xml:space="preserve">
    <value>Crop format with the same name already exists.</value>
  </data>
  <data name="CropFormatEmptyError" xml:space="preserve">
    <value>Crop format name cannot be an empty string.</value>
  </data>
  <data name="CropHeightError" xml:space="preserve">
    <value>Crop height cannot be less than 0.</value>
  </data>
  <data name="CropReadingError" xml:space="preserve">
    <value>Unable to read crop formats file. 
{0}</value>
  </data>
  <data name="CropWidthError" xml:space="preserve">
    <value>Crop width cannot be less than 0.</value>
  </data>
  <data name="HeightColumnHeader" xml:space="preserve">
    <value>Height ({0})</value>
  </data>
  <data name="inch" xml:space="preserve">
    <value>inches</value>
  </data>
  <data name="mm" xml:space="preserve">
    <value>mm</value>
  </data>
  <data name="UnitsComboBoxInch" xml:space="preserve">
    <value>Inches</value>
  </data>
  <data name="UnitsComboBoxMm" xml:space="preserve">
    <value>Millimeters</value>
  </data>
  <data name="WidthColumnHeader" xml:space="preserve">
    <value>Width ({0})</value>
  </data>
  <data name="FreeCropError" xml:space="preserve">
    <value>Crop format cannot contain zero and non-zero parameters at the same time.</value>
  </data>
  <data name="FreeFormatError" xml:space="preserve">
    <value>Paper format cannot contain zero and non-zero parameters at the same time.</value>
  </data>
</root>